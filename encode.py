# -*- coding: utf-8 -*
import base64
exec(base64.b64decode("ZnJvbSB1cmxsaWIucGFyc2UgaW1wb3J0IHVucXVvdGUKaW1wb3J0IGJhc2U2NAppbXBvcnQgaHR0cC5jbGllbnQKaW1wb3J0IGpzb24KaW1wb3J0IG9zCmltcG9ydCBzeXMKaW1wb3J0IHJlCnRyeToKICAgIGltcG9ydCByZXF1ZXN0cwpleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICBwcmludChlLCAnXG7nvLrlsJFyZXF1ZXN0c+aooeWdlywg6K+35omn6KGM5ZG95Luk77yacGlwMyBpbnN0YWxsIHJlcXVlc3RzXG4nKQogICAgc3lzLmV4aXQoMSkKb3MuZW52aXJvblsnbm9fcHJveHknXSA9ICcqJwpyZXF1ZXN0cy5wYWNrYWdlcy51cmxsaWIzLmRpc2FibGVfd2FybmluZ3MoKQoKCmRlZiBxbF9sb2dpbigpOgogICAgcGF0aCA9ICcvcWwvY29uZmlnL2F1dGguanNvbicKICAgIGlmIG9zLnBhdGguaXNmaWxlKHBhdGgpOgogICAgICAgIHdpdGggb3BlbihwYXRoLCAncicpYXMgZmlsZToKICAgICAgICAgICAgYXV0aCA9IGZpbGUucmVhZCgpCiAgICAgICAgICAgIGZpbGUuY2xvc2UoKQogICAgICAgIGF1dGggPSBqc29uLmxvYWRzKGF1dGgpCiAgICAgICAgdXNlcm5hbWUgPSBhdXRoWyd1c2VybmFtZSddCiAgICAgICAgcGFzc3dvcmQgPSBhdXRoWydwYXNzd29yZCddCiAgICAgICAgdG9rZW4gPSBhdXRoWyd0b2tlbiddCiAgICAgICAgaWYgdG9rZW4gPT0gJyc6CiAgICAgICAgICAgIHVybCA9ICdodHRwOi8vMTI3LjAuMC4xOjU3MDAvYXBpL2xvZ2luJwogICAgICAgICAgICBwYXlsb2FkID0geyd1c2VybmFtZSc6IHVzZXJuYW1lLCAncGFzc3dvcmQnOiBwYXNzd29yZH0KICAgICAgICAgICAgaGVhZGVycyA9IHsnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nfQogICAgICAgICAgICByZXMgPSByZXF1ZXN0cy5wb3N0KHVybD11cmwsIGhlYWRlcnM9aGVhZGVycywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhPXBheWxvYWQsIHZlcmlmeT1GYWxzZSkKICAgICAgICAgICAgdG9rZW4gPSBqc29uLmxvYWRzKHJlcy50ZXh0KVsndG9rZW4nXQogICAgICAgICAgICByZXR1cm4gdG9rZW4KICAgICAgICBlbHNlOgogICAgICAgICAgICByZXR1cm4gdG9rZW4KICAgIGVsc2U6CiAgICAgICAgcHJpbnQoJ+ayoeacieWPkeeOsGF1dGjmlofku7YsIOS9oOi/meaYr+mdkum+meWQlz8/PycpCiAgICAgICAgc3lzLmV4aXQoMCkKCgpkZWYgZ2V0X2NrKCk6CiAgICBnbG9iYWwgY2tfbGlzdAogICAgaWYgJ0pEX0NPT0tJRScgaW4gb3MuZW52aXJvbjoKICAgICAgICBja19saXN0ID0gb3MuZW52aXJvblsnSkRfQ09PS0lFJ10uc3BsaXQoJyYnKQogICAgICAgIGlmIGxlbihja19saXN0KSA+IDA6CiAgICAgICAgICAgIHJldHVybiBja19saXN0CiAgICAgICAgZWxzZToKICAgICAgICAgICAgcHJpbnQoJ0pEX0NPT0tJReWPmOmHj+acquWQr+eUqCcpCiAgICAgICAgICAgIHN5cy5leGl0KDEpCiAgICBlbHNlOgogICAgICAgIHByaW50KCfmnKrmt7vliqBKRF9DT09LSUXlj5jph48nKQogICAgICAgIHN5cy5leGl0KDApCgoKZGVmIGNoZWNrX2NrKGNrKToKICAgIHVybCA9ICdodHRwczovL3dxLmpkLmNvbS91c2VyX25ldy9pbmZvL0dldEpEVXNlckluZm9Vbmlvbj9vcmdGbGFnPUpEX1BpbkdvdV9OZXcmY2FsbFNvdXJjZT1tYWlub3JkZXInCiAgICBoZWFkZXJzID0geydDb29raWUnOiBjaywgJ1JlZmVyZXInOiAnaHR0cHM6Ly9ob21lLm0uamQuY29tL215SmQvaG9tZS5hY3Rpb24nLAogICAgICAgICAgICAgICAnVXNlci1BZ2VudCc6ICdNb3ppbGxhLzUuMCAoaVBob25lOyBDUFUgaVBob25lIE9TIDE0XzMgbGlrZSBNYWMgT1MgWCkgQXBwbGVXZWJLaXQvNjA1LjEuMTUgKEtIVE1MLCBsaWtlIEdlY2tvKSBWZXJzaW9uLzE0LjAuMiBNb2JpbGUvMTVFMTQ4IFNhZmFyaS82MDQuMScsIH0KICAgIHJlcyA9IHJlcXVlc3RzLmdldCh1cmw9dXJsLCBoZWFkZXJzPWhlYWRlcnMsIHZlcmlmeT1GYWxzZSwgdGltZW91dD0zMCkKICAgIGlmIHJlcy5zdGF0dXNfY29kZSA9PSAyMDA6CiAgICAgICAgY29kZSA9IGludChqc29uLmxvYWRzKHJlcy50ZXh0KVsncmV0Y29kZSddKQogICAgICAgIHBpbiA9IGNrLnNwbGl0KCc7JylbMV0KICAgICAgICBpZiBjb2RlID09IDA6CiAgICAgICAgICAgIHByaW50KHBpbiwgJ+eKtuaAgeato+W4uFxuJykKICAgICAgICAgICAgcmV0dXJuIFRydWUKICAgICAgICBlbHNlOgogICAgICAgICAgICBwcmludChwaW4sICfnirbmgIHlpLHmlYhcbicpCiAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgZWxzZToKICAgICAgICByZXR1cm4gRmFsc2UKCgpkZWYgc2VhcmNoX2NrKHBpbik6CiAgICBwaW4yID0gcGluLnJlcGxhY2UoJyUnLCAnJTVDJTI1JykKICAgIGNvbm4gPSBodHRwLmNsaWVudC5IVFRQQ29ubmVjdGlvbignMTI3LjAuMC4xJywgNTcwMCkKICAgIHBheWxvYWQgPSAnJwogICAgaGVhZGVycyA9IHsnQXV0aG9yaXphdGlvbic6ICdCZWFyZXIgJyt0b2tlbn0KICAgIHVybCA9ICcvYXBpL2VudnM/c2VhcmNoVmFsdWU9ezB9Jy5mb3JtYXQocGluMikKICAgIGNvbm4ucmVxdWVzdCgnR0VUJywgdXJsLCBwYXlsb2FkLCBoZWFkZXJzKQogICAgcmVzID0ganNvbi5sb2Fkcyhjb25uLmdldHJlc3BvbnNlKCkucmVhZCgpKQogICAgaWYgbGVuKHJlc1snZGF0YSddKSA9PSAwOgogICAgICAgIHByaW50KHBpbiwgJ+ajgOe0ouWksei0pVxuJykKICAgICAgICByZXR1cm4gRmFsc2UsIDEKICAgIGVsaWYgbGVuKHJlc1snZGF0YSddKSA+IDE6CiAgICAgICAgcHJpbnQocGluLCAnUGlu5a2Y5Zyo6YeN5aSNLCDlj5bnrKzkuIDmnaFcbicpCiAgICAgICAga2V5ID0gcmVzWydkYXRhJ11bMF1bJ3ZhbHVlJ10KICAgICAgICBlaWQgPSByZXNbJ2RhdGEnXVswXVsnX2lkJ10KICAgICAgICByZXR1cm4gVHJ1ZSwga2V5LCBlaWQKICAgIGVsc2U6CiAgICAgICAgcHJpbnQocGluLCAn5qOA57Si5oiQ5YqfXG4nKQogICAgICAgIGtleSA9IHJlc1snZGF0YSddWzBdWyd2YWx1ZSddCiAgICAgICAgZWlkID0gcmVzWydkYXRhJ11bMF1bJ19pZCddCiAgICAgICAgcmV0dXJuIFRydWUsIGVpZAoKCmRlZiBzb3J0KCk6CiAgICBjb25uID0gaHR0cC5jbGllbnQuSFRUUENvbm5lY3Rpb24oJzEyNy4wLjAuMScsIDU3MDApCiAgICBwYXlsb2FkID0gJycKICAgIHVybCA9ICcvYXBpL2VudnMnCiAgICBoZWFkZXJzID0geydBdXRob3JpemF0aW9uJzogJ0JlYXJlciAnK3Rva2VufQogICAgY29ubi5yZXF1ZXN0KCdHRVQnLCB1cmwsIHBheWxvYWQsIGhlYWRlcnMpCiAgICByZXMgPSBqc29uLmxvYWRzKGNvbm4uZ2V0cmVzcG9uc2UoKS5yZWFkKCkpCiAgICByZXMgPSByZXNbJ2RhdGEnXQogICAgaW5kZXggPSAwCiAgICBwcmVJZExpc3QgPSBbXQogICAgZm9yIGkgaW4gcmFuZ2UobGVuKHJlcykpOgogICAgICAgIGlmKHJlc1tpXVsnbmFtZSddID09ICdKRF9DT09LSUUnKToKICAgICAgICAgICAgciA9IHJlLmNvbXBpbGUocidwdF9waW49KC4qPyk7JykKICAgICAgICAgICAgcGluID0gci5maW5kYWxsKHJlc1tpXVsndmFsdWUnXSkKICAgICAgICAgICAgcGluID0gdW5xdW90ZShwaW5bMF0pCiAgICAgICAgICAgIHByZUlkTGlzdC5hcHBlbmQocmVzW2ldWydfaWQnXSkKICAgICAgICAgICAgaWYocGluID09IG15cGluKToKICAgICAgICAgICAgICAgIGluZGV4ID0gaQogICAgICAgICAgICAgICAgYnJlYWsKICAgIGlmKGluZGV4ICE9IDApOgogICAgICAgICMgcHJpbnQocHJlSWRMaXN0KQogICAgICAgIHByaW50KCLkvaDliY3ovrnmnIkiLCBsZW4ocHJlSWRMaXN0KSwgIuS4quWPtyIpCiAgICAgICAgcHJlTGlzdCA9IHJlc1s6aW5kZXgrMV0KICAgICAgICAjIHByaW50KHByZUxpc3QpCiAgICAgICAgcHJlTGlzdC5pbnNlcnQoMCwgcHJlTGlzdC5wb3AoKSkKICAgICAgICAjIHByZUxpc3QuaW5zZXJ0KGxlbihwcmVMaXN0KSsxLHByZUxpc3QucG9wKDApKQogICAgICAgICMgcHJpbnQocHJlTGlzdCkKICAgICAgICBmb3IgaSBpbiByYW5nZShsZW4ocHJlTGlzdCkpOgogICAgICAgICAgICBsaXN0ID0geyduYW1lJzogJ0pEX0NPT0tJRScsICd2YWx1ZSc6IHByZUxpc3RbaV1bJ3ZhbHVlJ10sICdfaWQnOiBwcmVJZExpc3RbaV0sCiAgICAgICAgICAgICAgICAgICAgJ3JlbWFya3MnOiBwcmVMaXN0W2ldWydyZW1hcmtzJ10gaWYgJ3JlbWFya3MnIGluIHByZUxpc3RbaV0gZWxzZSAiIn0KICAgICAgICAgICAgcWxfdXBkYXRlKGxpc3QpCiAgICBlbHNlOgogICAgICAgIHByaW50KCcnJwogICAgICAgIF8KICAgICAgIChcXCAgXyAgICAgICAgICAgICAgICAgICAgICBfX18KICAgICAgLi0iYCIoXFwgICAgICAgICAgICAgICAgXy4iImAgICBgIi0uCiAgICAgLyAgICAgIGAgYC0uXyAgICAgICAgXy4tIiAgICAgICAgICAgIGBcX18KICAgIDYgICA2KSAgICAgICAgYC0uX18uLScgICAgICAgICAgICAgICAgICAgIGAiLAogICAvICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgOy1gCiAgLyAgICAgLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8CiAoKSAgICAvICAvYCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8CiAgYC0tLWAifmBgXCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8CiAgICAgICAgICAgIFwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8CiAgICAgICAgICAgICBcICAgICAgICAgICAgXCAgICAgIC8gICAgICAgICAgIC8KICAgICAgICAgICAgIC9gLCAgICwgICAgICB8ICAgICB8ICAgICAgICAgICAvCiAgICAgICAgICAgIC8gICAiLS58ICAgICAgfCAgICAgfCAgICAgICAgIC8nCiAgICAgICAgICAgLyAgICAgLyB8ICAgICAvLF9fICAgfCAgICAgICAvYFwgCiAgICAgICAgIC8gICAgLycgIHwgICAgLyAgICBgIidcICAgICAgKCAgIFwgCiAgICAgICBfXy8gICAvJyAgICB8ICAgfCAgICAgICAgIGBcICAgICBcICAgXCAKICAgICAgIFwgICAgLyAgICAgIHwgICB8ICAgICAgICAgICBgXCAgICBcICAgXCAKICAgICAgICBgLSwvICAgICAgLyAgICB8ICAgICAgICAgICAgLyAgICAgfC0iYAogICAgICAgICAgICAgICAgIGAiIiJeXl4gICAgICAgICAgIGBeXiIiIiJgCgotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KICAgIFUgYXJlIHRoZSBmaXJzdCwgZG9uJ3QgcnVuIHRoaXMgc2NyaXB0LgonJycpCgoKZGVmIHFsX3VwZGF0ZShkYXRhKToKICAgIHByaW50KGRhdGEpCiAgICB1cmwgPSAnaHR0cDovLzEyNy4wLjAuMTo1NzAwL2FwaS9lbnZzJwogICAgZGF0YSA9IGpzb24uZHVtcHMoZGF0YSkKICAgIHJlcyA9IGpzb24ubG9hZHMocy5wdXQodXJsPXVybCwgZGF0YT1kYXRhKS50ZXh0KQogICAgaWYocmVzWydjb2RlJ10gPT0gMjAwKToKICAgICAgICBwcmludCgn5Lqk5o2i5oiQ5YqfXG4tLS0tLS0tLS0tLS0tLS0tLS0tLScpCgoKaWYgX19uYW1lX18gPT0gJ19fbWFpbl9fJzoKICAgIHRva2VuID0gcWxfbG9naW4oKQogICAgcyA9IHJlcXVlc3RzLnNlc3Npb24oKQogICAgcy5oZWFkZXJzLnVwZGF0ZSh7J2F1dGhvcml6YXRpb24nOiAnQmVhcmVyICcrc3RyKHRva2VuKX0pCiAgICBzLmhlYWRlcnMudXBkYXRlKHsnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb247Y2hhcnNldD1VVEYtOCd9KQogICAgaWYgJ215cGluJyBpbiBvcy5lbnZpcm9uOgogICAgICAgIG15cGluID0gb3MuZW52aXJvblsnbXlwaW4nXQogICAgZWxzZToKICAgICAgICBteXBpbiA9ICdqZF83ZjVhNTUxMGVjNzk3JwogICAgcHJpbnQobXlwaW4pCiAgICBzb3J0KCkKICAgIHN5cy5leGl0KDApCg=="))
