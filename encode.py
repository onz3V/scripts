# -*- coding: utf-8 -*
import base64
decode = ""
exec(base64.b64decode(decode).decode('utf-8'))
