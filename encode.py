import zlib
import base64
exec(zlib.decompress(base64.b64decode("aW1wb3J0IGJhc2U2NAppbXBvcnQgaHR0cC5jbGllbnQKaW1wb3J0IGpzb24KaW1wb3J0IG9zCmltcG9ydCBzeXMKaW1wb3J0IHJlCnRyeToKICAgIGltcG9ydCByZXF1ZXN0cwpleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICBwcmludChlLCAiXG7nvLrlsJFyZXF1ZXN0c+aooeWdlywg6K+35omn6KGM5ZG95Luk77yacGlwMyBpbnN0YWxsIHJlcXVlc3RzXG4iKQogICAgc3lzLmV4aXQoMSkKb3MuZW52aXJvblsnbm9fcHJveHknXSA9ICcqJwpyZXF1ZXN0cy5wYWNrYWdlcy51cmxsaWIzLmRpc2FibGVfd2FybmluZ3MoKQpmcm9tIHVybGxpYi5wYXJzZSBpbXBvcnQgdW5xdW90ZQoKZGVmIHFsX2xvZ2luKCk6CiAgICBwYXRoID0gJy9xbC9jb25maWcvYXV0aC5qc29uJwogICAgaWYgb3MucGF0aC5pc2ZpbGUocGF0aCk6CiAgICAgICAgd2l0aCBvcGVuKHBhdGgsICJyIilhcyBmaWxlOgogICAgICAgICAgICBhdXRoID0gZmlsZS5yZWFkKCkKICAgICAgICAgICAgZmlsZS5jbG9zZSgpCiAgICAgICAgYXV0aCA9IGpzb24ubG9hZHMoYXV0aCkKICAgICAgICB1c2VybmFtZSA9IGF1dGhbInVzZXJuYW1lIl0KICAgICAgICBwYXNzd29yZCA9IGF1dGhbInBhc3N3b3JkIl0KICAgICAgICB0b2tlbiA9IGF1dGhbInRva2VuIl0KICAgICAgICBpZiB0b2tlbiA9PSAnJzoKICAgICAgICAgICAgdXJsID0gImh0dHA6Ly8xMjcuMC4wLjE6NTcwMC9hcGkvbG9naW4iCiAgICAgICAgICAgIHBheWxvYWQgPSB7InVzZXJuYW1lIjogdXNlcm5hbWUsICJwYXNzd29yZCI6IHBhc3N3b3JkfQogICAgICAgICAgICBoZWFkZXJzID0geydDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbid9CiAgICAgICAgICAgIHJlcyA9IHJlcXVlc3RzLnBvc3QodXJsPXVybCwgaGVhZGVycz1oZWFkZXJzLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE9cGF5bG9hZCwgdmVyaWZ5PUZhbHNlKQogICAgICAgICAgICB0b2tlbiA9IGpzb24ubG9hZHMocmVzLnRleHQpWyd0b2tlbiddCiAgICAgICAgICAgIHJldHVybiB0b2tlbgogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHJldHVybiB0b2tlbgogICAgZWxzZToKICAgICAgICBwcmludCgi5rKh5pyJ5Y+R546wYXV0aOaWh+S7tiwg5L2g6L+Z5piv6Z2S6b6Z5ZCXPz8/IikKICAgICAgICBzeXMuZXhpdCgwKQoKZGVmIGdldF9jaygpOgogICAgZ2xvYmFsIGNrX2xpc3QKICAgIGlmICJKRF9DT09LSUUiIGluIG9zLmVudmlyb246CiAgICAgICAgY2tfbGlzdCA9IG9zLmVudmlyb25bJ0pEX0NPT0tJRSddLnNwbGl0KCcmJykKICAgICAgICBpZiBsZW4oY2tfbGlzdCkgPiAwOgogICAgICAgICAgICByZXR1cm4gY2tfbGlzdAogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHByaW50KCJKRF9DT09LSUXlj5jph4/mnKrlkK/nlKgiKQogICAgICAgICAgICBzeXMuZXhpdCgxKQogICAgZWxzZToKICAgICAgICBwcmludCgi5pyq5re75YqgSkRfQ09PS0lF5Y+Y6YePIikKICAgICAgICBzeXMuZXhpdCgwKQoKCmRlZiBjaGVja19jayhjayk6CiAgICB1cmwgPSAnaHR0cHM6Ly93cS5qZC5jb20vdXNlcl9uZXcvaW5mby9HZXRKRFVzZXJJbmZvVW5pb24/b3JnRmxhZz1KRF9QaW5Hb3VfTmV3JmNhbGxTb3VyY2U9bWFpbm9yZGVyJwogICAgaGVhZGVycyA9IHsnQ29va2llJzogY2ssICdSZWZlcmVyJzogJ2h0dHBzOi8vaG9tZS5tLmpkLmNvbS9teUpkL2hvbWUuYWN0aW9uJywKICAgICAgICAgICAgICAgJ1VzZXItQWdlbnQnOiAnTW96aWxsYS81LjAgKGlQaG9uZTsgQ1BVIGlQaG9uZSBPUyAxNF8zIGxpa2UgTWFjIE9TIFgpIEFwcGxlV2ViS2l0LzYwNS4xLjE1IChLSFRNTCwgbGlrZSBHZWNrbykgVmVyc2lvbi8xNC4wLjIgTW9iaWxlLzE1RTE0OCBTYWZhcmkvNjA0LjEnLCB9CiAgICByZXMgPSByZXF1ZXN0cy5nZXQodXJsPXVybCwgaGVhZGVycz1oZWFkZXJzLCB2ZXJpZnk9RmFsc2UsIHRpbWVvdXQ9MzApCiAgICBpZiByZXMuc3RhdHVzX2NvZGUgPT0gMjAwOgogICAgICAgIGNvZGUgPSBpbnQoanNvbi5sb2FkcyhyZXMudGV4dClbJ3JldGNvZGUnXSkKICAgICAgICBwaW4gPSBjay5zcGxpdCgiOyIpWzFdCiAgICAgICAgaWYgY29kZSA9PSAwOgogICAgICAgICAgICBwcmludChwaW4sICLnirbmgIHmraPluLhcbiIpCiAgICAgICAgICAgIHJldHVybiBUcnVlCiAgICAgICAgZWxzZToKICAgICAgICAgICAgcHJpbnQocGluLCAi54q25oCB5aSx5pWIXG4iKQogICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgIGVsc2U6CiAgICAgICAgcmV0dXJuIEZhbHNlCgpkZWYgc2VhcmNoX2NrKHBpbik6CiAgICBwaW4yID0gcGluLnJlcGxhY2UoJyUnLCAnJTVDJTI1JykKICAgIGNvbm4gPSBodHRwLmNsaWVudC5IVFRQQ29ubmVjdGlvbigiMTI3LjAuMC4xIiwgNTcwMCkKICAgIHBheWxvYWQgPSAnJwogICAgaGVhZGVycyA9IHsnQXV0aG9yaXphdGlvbic6ICdCZWFyZXIgJyt0b2tlbn0KICAgIHVybCA9ICcvYXBpL2VudnM/c2VhcmNoVmFsdWU9ezB9Jy5mb3JtYXQocGluMikKICAgIGNvbm4ucmVxdWVzdCgiR0VUIiwgdXJsLCBwYXlsb2FkLCBoZWFkZXJzKQogICAgcmVzID0ganNvbi5sb2Fkcyhjb25uLmdldHJlc3BvbnNlKCkucmVhZCgpKQogICAgaWYgbGVuKHJlc1snZGF0YSddKSA9PSAwOgogICAgICAgIHByaW50KHBpbiwgIuajgOe0ouWksei0pVxuIikKICAgICAgICByZXR1cm4gRmFsc2UsIDEKICAgIGVsaWYgbGVuKHJlc1snZGF0YSddKSA+IDE6CiAgICAgICAgcHJpbnQocGluLCAiUGlu5a2Y5Zyo6YeN5aSNLCDlj5bnrKzkuIDmnaFcbiIpCiAgICAgICAga2V5ID0gcmVzWydkYXRhJ11bMF1bJ3ZhbHVlJ10KICAgICAgICBlaWQgPSByZXNbJ2RhdGEnXVswXVsnX2lkJ10KICAgICAgICByZXR1cm4gVHJ1ZSwga2V5LCBlaWQKICAgIGVsc2U6CiAgICAgICAgcHJpbnQocGluLCAi5qOA57Si5oiQ5YqfXG4iKQogICAgICAgIGtleSA9IHJlc1snZGF0YSddWzBdWyd2YWx1ZSddCiAgICAgICAgZWlkID0gcmVzWydkYXRhJ11bMF1bJ19pZCddCiAgICAgICAgcmV0dXJuIFRydWUsIGVpZAoKZGVmIHNvcnQoKToKICAgIGNvbm4gPSBodHRwLmNsaWVudC5IVFRQQ29ubmVjdGlvbigiMTI3LjAuMC4xIiwgNTcwMCkKICAgIHBheWxvYWQgPSAnJwogICAgdXJsID0gJy9hcGkvZW52cycKICAgIGhlYWRlcnMgPSB7J0F1dGhvcml6YXRpb24nOiAnQmVhcmVyICcrdG9rZW59CiAgICBjb25uLnJlcXVlc3QoIkdFVCIsIHVybCwgcGF5bG9hZCwgaGVhZGVycykKICAgIHJlcyA9IGpzb24ubG9hZHMoY29ubi5nZXRyZXNwb25zZSgpLnJlYWQoKSkKICAgIHJlcyA9IHJlc1snZGF0YSddCiAgICBpbmRleD0wCiAgICBvbGRGID0geyJuYW1lIjogIkpEX0NPT0tJRSIsICJ2YWx1ZSI6IHJlc1swXVsndmFsdWUnXSwgIl9pZCI6IHJlc1swXVsnX2lkJ10sInJlbWFya3MiOnJlc1swXVsicmVtYXJrcyJdfQogICAgZm9yIGkgaW4gcmFuZ2UobGVuKHJlcykpOgogICAgICAgIGlmKHJlc1tpXVsibmFtZSJdID09ICdKRF9DT09LSUUnKToKICAgICAgICAgICAgciA9IHJlLmNvbXBpbGUociJwdF9waW49KC4qPyk7IikKICAgICAgICAgICAgcGluID0gci5maW5kYWxsKHJlc1tpXVsndmFsdWUnXSkKICAgICAgICAgICAgcGluID0gdW5xdW90ZShwaW5bMF0pCiAgICAgICAgICAgIGlmKHBpbiA9PSBteXBpbik6CiAgICAgICAgICAgICAgICBpbmRleD1pCiAgICAgICAgICAgICAgICBicmVhawogICAgY2hhbmdlTGlzdCA9ICB7Im5hbWUiOiAiSkRfQ09PS0lFIiwgInZhbHVlIjogcmVzW2luZGV4XVsndmFsdWUnXSwgIl9pZCI6IHJlc1swXVsnX2lkJ10sInJlbWFya3MiOnJlc1tpbmRleF1bInJlbWFya3MiXX0KICAgIHFsX3VwZGF0ZShjaGFuZ2VMaXN0KQogICAgb2xkRlsiX2lkIl0gPSByZXNbaW5kZXhdWyJfaWQiXQogICAgcWxfdXBkYXRlKG9sZEYpCgpkZWYgcWxfdXBkYXRlKGRhdGEpOgogICAgdXJsID0gJ2h0dHA6Ly8xMjcuMC4wLjE6NTcwMC9hcGkvZW52cycKICAgIGRhdGEgPSBqc29uLmR1bXBzKGRhdGEpCiAgICByZXMgPSBqc29uLmxvYWRzKHMucHV0KHVybD11cmwsIGRhdGE9ZGF0YSkudGV4dCkKICAgIGlmKHJlc1snY29kZSddID09IDIwMCk6CiAgICAJcHJpbnQoIuaJp+ihjOWujOaIkFxuLS0tLS0tLS0tLS0tLS0tLS0tLS0iKQppZiBfX25hbWVfXyA9PSAnX19tYWluX18nOgogICAgdG9rZW4gPSBxbF9sb2dpbigpCiAgICBzID0gcmVxdWVzdHMuc2Vzc2lvbigpCiAgICBzLmhlYWRlcnMudXBkYXRlKHsiYXV0aG9yaXphdGlvbiI6ICJCZWFyZXIgIitzdHIodG9rZW4pfSkKICAgIHMuaGVhZGVycy51cGRhdGUoeyJDb250ZW50LVR5cGUiOiAiYXBwbGljYXRpb24vanNvbjtjaGFyc2V0PVVURi04In0pCiAgICBteXBpbiA9ICJqZF83ZjVhNTUxMGVjNzk3IgogICAgc29ydCgpCiAgICBzeXMuZXhpdCgwKQo=")))
